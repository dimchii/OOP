#include <iostream>
#include <string>
using namespace std;


class Avto {
protected:
	string Name;
	string Marka;
	int Losh;
	bool Benzin;


public:
	Avto() {}

	Avto(string N, string M, int L, bool B) {
		this->Name = N;
		this->Marka = M;
		this->Losh = L;
		this->Benzin = B;
	}

	virtual void output()
	{
		cout << "Name: " << Name << endl
			<< "Marka: " << Marka << endl
			<< "Losh: " << Losh << endl
			<< "Benzin: " << Benzin << endl;
	}

	virtual void input()
	{
		cout << "Name: "; cin >> Name;
		cout << "Marka: "; cin >> Marka;
		cout << "Losh: "; cin >> Losh;
		cout << "Benzin: "; cin >> Benzin;
	}

	~Avto() {}

};





class City : public Avto
{
public:
	City() {}

	City(string N, string M, int L, bool B, int Num) :Avto(N, M, L, B)
	{
		Number = Num;
	}

	void output() override
	{
		Avto::output();
		cout << "Number: " << Number << endl;
	}

	void input() override
	{
		Avto::input();
		cout << "Number: "; cin >> Number;
	}



	~City() {}

protected:
	int Number;
};

template<class T>
class Container {
public:
	Container() {}
	void add(T b) {
		f[k] = b;
		k++;
	}
	T operator[] (const int index)
	{
		return f[index];
	}
private:
	T *f = new T[10];
	int k = 0;
};

int main() {

	
	Container <Avto*> b;

	Avto Car("Oka", "BA3", 50, true), Tractor;
	City Bus("Conecto", "Mercedes", 100, true, 12);

	

	b.add(&Bus);
	b[0]->output();


	//Car.output();

	b.add(&Car);
	b.add(&Tractor);

	//Bus.output();
}
